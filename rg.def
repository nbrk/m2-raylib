DEFINITION MODULE FOR "C" rg;

(*
    Title:     Modula-2 direct bindings to the excellent Raylib (raygui part).
    Created:   Mon Jul 1 19:19:31 2024
    Author:    Nikolay A. Burkov <nbrk@linklevel.net>
 *)


IMPORT rl;

EXPORT UNQUALIFIED
  STATE_NORMAL, STATE_FOCUSED, STATE_PRESSED, STATE_DISABLED, TEXT_ALIGN_LEFT,
  TEXT_ALIGN_CENTER, TEXT_ALIGN_RIGHT, DEFAULT, LABEL, BUTTON, TOGGLE, SLIDER,
  PROGRESSBAR, CHECKBOX, COMBOBOX, DROPDOWNBOX, TEXTBOX, VALUEBOX, SPINNER,
  LISTVIEW, COLORPICKER, SCROLLBAR, STATUSBAR, BORDER_COLOR_NORMAL,
  BASE_COLOR_NORMAL, TEXT_COLOR_NORMAL, BORDER_COLOR_FOCUSED, BASE_COLOR_FOCUSED,
  TEXT_COLOR_FOCUSED, BORDER_COLOR_PRESSED, BASE_COLOR_PRESSED, TEXT_COLOR_PRESSED,
  BORDER_COLOR_DISABLED, BASE_COLOR_DISABLED, TEXT_COLOR_DISABLED, BORDER_WIDTH,
  TEXT_PADDING, TEXT_ALIGNMENT, RESERVED, TEXT_SIZE, TEXT_SPACING, LINE_COLOR,
  BACKGROUND_COLOR, TEXT_LINE_SPACING, GROUP_PADDING, SLIDER_WIDTH, SLIDER_PADDING,
  PROGRESS_PADDING, ARROWS_SIZE, ARROWS_VISIBLE, SCROLL_SLIDER_PADDING,
  SCROLL_SLIDER_SIZE, SCROLL_PADDING, SCROLL_SPEED, CHECK_PADDING,
  COMBO_BUTTON_WIDTH, COMBO_BUTTON_SPACING, ARROW_PADDING, DROPDOWN_ITEMS_SPACING,
  TEXT_INNER_PADDING, TEXT_LINES_SPACING, TEXT_ALIGNMENT_VERTICAL, TEXT_MULTILINE,
  TEXT_WRAP_MODE, TEXT_READONLY, SPIN_BUTTON_WIDTH, SPIN_BUTTON_SPACING,
  LIST_ITEMS_HEIGHT, LIST_ITEMS_SPACING, SCROLLBAR_WIDTH, SCROLLBAR_SIDE,
  COLOR_SELECTOR_SIZE, HUEBAR_WIDTH, HUEBAR_PADDING, HUEBAR_SELECTOR_HEIGHT,
  HUEBAR_SELECTOR_OVERFLOW, SCROLLBAR_LEFT_SIDE, SCROLLBAR_RIGHT_SIDE, ICON_NONE,
  ICON_FOLDER_FILE_OPEN, ICON_FILE_SAVE_CLASSIC, ICON_FOLDER_OPEN,
  ICON_FOLDER_SAVE, ICON_FILE_OPEN, ICON_FILE_SAVE, ICON_FILE_EXPORT,
  ICON_FILE_ADD, ICON_FILE_DELETE, ICON_FILETYPE_TEXT, ICON_FILETYPE_AUDIO,
  ICON_FILETYPE_IMAGE, ICON_FILETYPE_PLAY, ICON_FILETYPE_VIDEO, ICON_FILETYPE_INFO,
  ICON_FILE_COPY, ICON_FILE_CUT, ICON_FILE_PASTE, ICON_CURSOR_HAND,
  ICON_CURSOR_POINTER, ICON_CURSOR_CLASSIC, ICON_PENCIL, ICON_PENCIL_BIG,
  ICON_BRUSH_CLASSIC, ICON_BRUSH_PAINTER, ICON_WATER_DROP, ICON_COLOR_PICKER,
  ICON_RUBBER, ICON_COLOR_BUCKET, ICON_TEXT_T, ICON_TEXT_A, ICON_SCALE,
  ICON_RESIZE, ICON_FILTER_POINT, ICON_FILTER_BILINEAR, ICON_CROP, ICON_CROP_ALPHA,
  ICON_SQUARE_TOGGLE, ICON_SYMMETRY, ICON_SYMMETRY_HORIZONTAL,
  ICON_SYMMETRY_VERTICAL, ICON_LENS, ICON_LENS_BIG, ICON_EYE_ON, ICON_EYE_OFF,
  ICON_FILTER_TOP, ICON_FILTER, ICON_TARGET_POINT, ICON_TARGET_SMALL,
  ICON_TARGET_BIG, ICON_TARGET_MOVE, ICON_CURSOR_MOVE, ICON_CURSOR_SCALE,
  ICON_CURSOR_SCALE_RIGHT, ICON_CURSOR_SCALE_LEFT, ICON_UNDO, ICON_REDO,
  ICON_REREDO, ICON_MUTATE, ICON_ROTATE, ICON_REPEAT, ICON_SHUFFLE, ICON_EMPTYBOX,
  ICON_TARGET, ICON_TARGET_SMALL_FILL, ICON_TARGET_BIG_FILL, ICON_TARGET_MOVE_FILL,
  ICON_CURSOR_MOVE_FILL, ICON_CURSOR_SCALE_FILL, ICON_CURSOR_SCALE_RIGHT_FILL,
  ICON_CURSOR_SCALE_LEFT_FILL, ICON_UNDO_FILL, ICON_REDO_FILL, ICON_REREDO_FILL,
  ICON_MUTATE_FILL, ICON_ROTATE_FILL, ICON_REPEAT_FILL, ICON_SHUFFLE_FILL,
  ICON_EMPTYBOX_SMALL, ICON_BOX, ICON_BOX_TOP, ICON_BOX_TOP_RIGHT, ICON_BOX_RIGHT,
  ICON_BOX_BOTTOM_RIGHT, ICON_BOX_BOTTOM, ICON_BOX_BOTTOM_LEFT, ICON_BOX_LEFT,
  ICON_BOX_TOP_LEFT, ICON_BOX_CENTER, ICON_BOX_CIRCLE_MASK, ICON_POT,
  ICON_ALPHA_MULTIPLY, ICON_ALPHA_CLEAR, ICON_DITHERING, ICON_MIPMAPS,
  ICON_BOX_GRID, ICON_GRID, ICON_BOX_CORNERS_SMALL, ICON_BOX_CORNERS_BIG,
  ICON_FOUR_BOXES, ICON_GRID_FILL, ICON_BOX_MULTISIZE, ICON_ZOOM_SMALL,
  ICON_ZOOM_MEDIUM, ICON_ZOOM_BIG, ICON_ZOOM_ALL, ICON_ZOOM_CENTER,
  ICON_BOX_DOTS_SMALL, ICON_BOX_DOTS_BIG, ICON_BOX_CONCENTRIC, ICON_BOX_GRID_BIG,
  ICON_OK_TICK, ICON_CROSS, ICON_ARROW_LEFT, ICON_ARROW_RIGHT, ICON_ARROW_DOWN,
  ICON_ARROW_UP, ICON_ARROW_LEFT_FILL, ICON_ARROW_RIGHT_FILL, ICON_ARROW_DOWN_FILL,
  ICON_ARROW_UP_FILL, ICON_AUDIO, ICON_FX, ICON_WAVE, ICON_WAVE_SINUS,
  ICON_WAVE_SQUARE, ICON_WAVE_TRIANGULAR, ICON_CROSS_SMALL, ICON_PLAYER_PREVIOUS,
  ICON_PLAYER_PLAY_BACK, ICON_PLAYER_PLAY, ICON_PLAYER_PAUSE, ICON_PLAYER_STOP,
  ICON_PLAYER_NEXT, ICON_PLAYER_RECORD, ICON_MAGNET, ICON_LOCK_CLOSE,
  ICON_LOCK_OPEN, ICON_CLOCK, ICON_TOOLS, ICON_GEAR, ICON_GEAR_BIG, ICON_BIN,
  ICON_HAND_POINTER, ICON_LASER, ICON_COIN, ICON_EXPLOSION, ICON_1UP, ICON_PLAYER,
  ICON_PLAYER_JUMP, ICON_KEY, ICON_DEMON, ICON_TEXT_POPUP, ICON_GEAR_EX,
  ICON_CRACK, ICON_CRACK_POINTS, ICON_STAR, ICON_DOOR, ICON_EXIT, ICON_MODE_2D,
  ICON_MODE_3D, ICON_CUBE, ICON_CUBE_FACE_TOP, ICON_CUBE_FACE_LEFT,
  ICON_CUBE_FACE_FRONT, ICON_CUBE_FACE_BOTTOM, ICON_CUBE_FACE_RIGHT,
  ICON_CUBE_FACE_BACK, ICON_CAMERA, ICON_SPECIAL, ICON_LINK_NET, ICON_LINK_BOXES,
  ICON_LINK_MULTI, ICON_LINK, ICON_LINK_BROKE, ICON_TEXT_NOTES, ICON_NOTEBOOK,
  ICON_SUITCASE, ICON_SUITCASE_ZIP, ICON_MAILBOX, ICON_MONITOR, ICON_PRINTER,
  ICON_PHOTO_CAMERA, ICON_PHOTO_CAMERA_FLASH, ICON_HOUSE, ICON_HEART, ICON_CORNER,
  ICON_VERTICAL_BARS, ICON_VERTICAL_BARS_FILL, ICON_LIFE_BARS, ICON_INFO,
  ICON_CROSSLINE, ICON_HELP, ICON_FILETYPE_ALPHA, ICON_FILETYPE_HOME,
  ICON_LAYERS_VISIBLE, ICON_LAYERS, ICON_WINDOW, ICON_HIDPI, ICON_FILETYPE_BINARY,
  ICON_HEX, ICON_SHIELD, ICON_FILE_NEW, ICON_FOLDER_ADD, ICON_ALARM, ICON_CPU,
  ICON_ROM, ICON_STEP_OVER, ICON_STEP_INTO, ICON_STEP_OUT, ICON_RESTART,
  ICON_BREAKPOINT_ON, ICON_BREAKPOINT_OFF, ICON_BURGER_MENU, ICON_CASE_SENSITIVE,
  ICON_REG_EXP, ICON_FOLDER, ICON_FILE, ICON_SAND_TIMER, ICON_220, ICON_221,
  ICON_222, ICON_223, ICON_224, ICON_225, ICON_226, ICON_227, ICON_228, ICON_229,
  ICON_230, ICON_231, ICON_232, ICON_233, ICON_234, ICON_235, ICON_236, ICON_237,
  ICON_238, ICON_239, ICON_240, ICON_241, ICON_242, ICON_243, ICON_244, ICON_245,
  ICON_246, ICON_247, ICON_248, ICON_249, ICON_250, ICON_251, ICON_252, ICON_253,
  ICON_254, ICON_255, GuiStyleProp, GuiState, GuiTextAlignment, GuiControl,
  GuiControlProperty, GuiDefaultProperty, GuiToggleProperty, GuiSliderProperty,
  GuiProgressBarProperty, GuiScrollBarProperty, GuiCheckBoxProperty,
  GuiComboBoxProperty, GuiDropdownBoxProperty, GuiTextBoxProperty,
  GuiSpinnerProperty, GuiListViewProperty, GuiColorPickerProperty, GuiEnable,
  GuiDisable, GuiLock, GuiUnlock, GuiIsLocked, GuiSetAlpha, GuiSetState,
  GuiGetState, GuiSetFont, GuiGetFont, GuiSetStyle, GuiGetStyle, GuiLoadStyle,
  GuiLoadStyleDefault, GuiEnableTooltip, GuiDisableTooltip, GuiSetTooltip,
  GuiIconText, GuiSetIconScale, GuiGetIcons, GuiLoadIcons, GuiDrawIcon,
  GuiWindowBox, GuiGroupBox, GuiLine, GuiPanel, GuiTabBar,
  GuiScrollPanel, GuiLabel, GuiButton, GuiLabelButton, GuiToggle,
  GuiToggleGroup, GuiCheckBox, GuiComboBox, GuiDropdownBox, GuiSpinner,
  GuiValueBox, GuiTextBox, GuiSlider, GuiSliderBar, GuiProgressBar, GuiStatusBar,
  GuiDummyRec, GuiGrid, GuiListView, GuiListViewEx, GuiMessageBox, GuiTextInputBox,
  GuiColorPicker, GuiColorPanel, GuiColorBarAlpha, GuiColorBarHue,
  GuiColorPickerHSV, GuiColorPanelHSV, GuiIconName;

CONST
(* H2D: Enumeration: GuiState *)
  STATE_NORMAL = 0;
  STATE_FOCUSED = 1;
  STATE_PRESSED = 2;
  STATE_DISABLED = 3;

(* H2D: Enumeration: GuiTextAlignment *)
  TEXT_ALIGN_LEFT = 0;
  TEXT_ALIGN_CENTER = 1;
  TEXT_ALIGN_RIGHT = 2;

(* H2D: Enumeration: GuiControl *)
  DEFAULT = 0;
  LABEL = 1;   (*  Used also for: LABELBUTTON *)
  BUTTON = 2;
  TOGGLE = 3;   (*  Used also for: TOGGLEGROUP *)
  SLIDER = 4;   (*  Used also for: SLIDERBAR *)
  PROGRESSBAR = 5;
  CHECKBOX = 6;
  COMBOBOX = 7;
  DROPDOWNBOX = 8;
  TEXTBOX = 9;   (*  Used also for: TEXTBOXMULTI *)
  VALUEBOX = 10;
  SPINNER = 11;   (*  Uses: BUTTON, VALUEBOX *)
  LISTVIEW = 12;
  COLORPICKER = 13;
  SCROLLBAR = 14;
  STATUSBAR = 15;

(* H2D: Enumeration: GuiControlProperty *)
  BORDER_COLOR_NORMAL = 0;
  BASE_COLOR_NORMAL = 1;
  TEXT_COLOR_NORMAL = 2;
  BORDER_COLOR_FOCUSED = 3;
  BASE_COLOR_FOCUSED = 4;
  TEXT_COLOR_FOCUSED = 5;
  BORDER_COLOR_PRESSED = 6;
  BASE_COLOR_PRESSED = 7;
  TEXT_COLOR_PRESSED = 8;
  BORDER_COLOR_DISABLED = 9;
  BASE_COLOR_DISABLED = 10;
  TEXT_COLOR_DISABLED = 11;
  BORDER_WIDTH = 12;
  TEXT_PADDING = 13;
  TEXT_ALIGNMENT = 14;
  RESERVED = 15;

(* H2D: Enumeration: GuiDefaultProperty *)
  TEXT_SIZE = 16;   (*  Text size (glyphs max height) *)
  TEXT_SPACING = 17;   (*  Text spacing between glyphs *)
  LINE_COLOR = 18;   (*  Line control color *)
  BACKGROUND_COLOR = 19;   (*  Background color *)
  TEXT_LINE_SPACING = 20;   (*  Text spacing between lines *)

  (* H2D: Enumeration: GuiToggleProperty *)
  GROUP_PADDING = 16;   (*  ToggleGroup separation between toggles *)

(* H2D: Enumeration: GuiSliderProperty *)
  SLIDER_WIDTH = 16;   (*  Slider size of internal bar *)
  SLIDER_PADDING = 17;   (*  Slider/SliderBar internal bar padding *)

(* H2D: Enumeration: GuiProgressBarProperty *)
  PROGRESS_PADDING = 16;   (*  ProgressBar internal padding *)

(* H2D: Enumeration: GuiScrollBarProperty *)
  ARROWS_SIZE = 16;
  ARROWS_VISIBLE = 17;
  SCROLL_SLIDER_PADDING = 18;   (*  (SLIDERBAR, SLIDER_PADDING) *)
  SCROLL_SLIDER_SIZE = 19;
  SCROLL_PADDING = 20;
  SCROLL_SPEED = 21;

(* H2D: Enumeration: GuiCheckBoxProperty *)
  CHECK_PADDING = 16;   (*  CheckBox internal check padding *)

(* H2D: Enumeration: GuiComboBoxProperty *)
  COMBO_BUTTON_WIDTH = 16;   (*  ComboBox right button width *)
  COMBO_BUTTON_SPACING = 17;   (*  ComboBox button separation *)

(* H2D: Enumeration: GuiDropdownBoxProperty *)
  ARROW_PADDING = 16;   (*  DropdownBox arrow separation from border and items *)
  DROPDOWN_ITEMS_SPACING = 17;   (*  DropdownBox items separation *)

(* H2D: Enumeration: GuiTextBoxProperty *)
  TEXT_INNER_PADDING = 16;   (*  TextBox/TextBoxMulti/ValueBox/Spinner inner text padding *)
  TEXT_LINES_SPACING = 17;   (*  TextBoxMulti lines separation *)
  TEXT_ALIGNMENT_VERTICAL = 18;   (*  TextBoxMulti vertical alignment: 0-CENTERED, 1-UP, 2-DOWN *)
  TEXT_MULTILINE = 19;   (*  TextBox supports multiple lines *)
  TEXT_WRAP_MODE = 20;   (*  TextBox wrap mode for multiline: 0-NO_WRAP, 1-CHAR_WRAP, 2-WORD_WRAP *)
  TEXT_READONLY = 21;   (*  TextBox is readonly, no editable *)

(* H2D: Enumeration: GuiSpinnerProperty *)
  SPIN_BUTTON_WIDTH = 16;   (*  Spinner left/right buttons width *)
  SPIN_BUTTON_SPACING = 17;   (*  Spinner buttons separation *)

  (* H2D: Enumeration: GuiListViewProperty *)
  LIST_ITEMS_HEIGHT = 16;   (*  ListView items height *)
  LIST_ITEMS_SPACING = 17;   (*  ListView items separation *)
  SCROLLBAR_WIDTH = 18;   (*  ListView scrollbar size (usually width) *)
  SCROLLBAR_SIDE = 19;   (*  ListView scrollbar side (0-left, 1-right) *)

(* H2D: Enumeration: GuiColorPickerProperty *)
  COLOR_SELECTOR_SIZE = 16;
  HUEBAR_WIDTH = 17;   (*  ColorPicker right hue bar width *)
  HUEBAR_PADDING = 18;   (*  ColorPicker right hue bar separation from panel *)
  HUEBAR_SELECTOR_HEIGHT = 19;   (*  ColorPicker right hue bar selector height *)
  HUEBAR_SELECTOR_OVERFLOW = 20;   (*  ColorPicker right hue bar selector overflow *)

  (* H2D: End of enumeration: GuiColorPickerProperty *)
  SCROLLBAR_LEFT_SIDE = 0;
  SCROLLBAR_RIGHT_SIDE = 1;

  (* H2D: Enumeration: GuiIconName *)
  ICON_NONE = 0;
  ICON_FOLDER_FILE_OPEN = 1;
  ICON_FILE_SAVE_CLASSIC = 2;
  ICON_FOLDER_OPEN = 3;
  ICON_FOLDER_SAVE = 4;
  ICON_FILE_OPEN = 5;
  ICON_FILE_SAVE = 6;
  ICON_FILE_EXPORT = 7;
  ICON_FILE_ADD = 8;
  ICON_FILE_DELETE = 9;
  ICON_FILETYPE_TEXT = 10;
  ICON_FILETYPE_AUDIO = 11;
  ICON_FILETYPE_IMAGE = 12;
  ICON_FILETYPE_PLAY = 13;
  ICON_FILETYPE_VIDEO = 14;
  ICON_FILETYPE_INFO = 15;
  ICON_FILE_COPY = 16;
  ICON_FILE_CUT = 17;
  ICON_FILE_PASTE = 18;
  ICON_CURSOR_HAND = 19;
  ICON_CURSOR_POINTER = 20;
  ICON_CURSOR_CLASSIC = 21;
  ICON_PENCIL = 22;
  ICON_PENCIL_BIG = 23;
  ICON_BRUSH_CLASSIC = 24;
  ICON_BRUSH_PAINTER = 25;
  ICON_WATER_DROP = 26;
  ICON_COLOR_PICKER = 27;
  ICON_RUBBER = 28;
  ICON_COLOR_BUCKET = 29;
  ICON_TEXT_T = 30;
  ICON_TEXT_A = 31;
  ICON_SCALE = 32;
  ICON_RESIZE = 33;
  ICON_FILTER_POINT = 34;
  ICON_FILTER_BILINEAR = 35;
  ICON_CROP = 36;
  ICON_CROP_ALPHA = 37;
  ICON_SQUARE_TOGGLE = 38;
  ICON_SYMMETRY = 39;
  ICON_SYMMETRY_HORIZONTAL = 40;
  ICON_SYMMETRY_VERTICAL = 41;
  ICON_LENS = 42;
  ICON_LENS_BIG = 43;
  ICON_EYE_ON = 44;
  ICON_EYE_OFF = 45;
  ICON_FILTER_TOP = 46;
  ICON_FILTER = 47;
  ICON_TARGET_POINT = 48;
  ICON_TARGET_SMALL = 49;
  ICON_TARGET_BIG = 50;
  ICON_TARGET_MOVE = 51;
  ICON_CURSOR_MOVE = 52;
  ICON_CURSOR_SCALE = 53;
  ICON_CURSOR_SCALE_RIGHT = 54;
  ICON_CURSOR_SCALE_LEFT = 55;
  ICON_UNDO = 56;
  ICON_REDO = 57;
  ICON_REREDO = 58;
  ICON_MUTATE = 59;
  ICON_ROTATE = 60;
  ICON_REPEAT = 61;
  ICON_SHUFFLE = 62;
  ICON_EMPTYBOX = 63;
  ICON_TARGET = 64;
  ICON_TARGET_SMALL_FILL = 65;
  ICON_TARGET_BIG_FILL = 66;
  ICON_TARGET_MOVE_FILL = 67;
  ICON_CURSOR_MOVE_FILL = 68;
  ICON_CURSOR_SCALE_FILL = 69;
  ICON_CURSOR_SCALE_RIGHT_FILL = 70;
  ICON_CURSOR_SCALE_LEFT_FILL = 71;
  ICON_UNDO_FILL = 72;
  ICON_REDO_FILL = 73;
  ICON_REREDO_FILL = 74;
  ICON_MUTATE_FILL = 75;
  ICON_ROTATE_FILL = 76;
  ICON_REPEAT_FILL = 77;
  ICON_SHUFFLE_FILL = 78;
  ICON_EMPTYBOX_SMALL = 79;
  ICON_BOX = 80;
  ICON_BOX_TOP = 81;
  ICON_BOX_TOP_RIGHT = 82;
  ICON_BOX_RIGHT = 83;
  ICON_BOX_BOTTOM_RIGHT = 84;
  ICON_BOX_BOTTOM = 85;
  ICON_BOX_BOTTOM_LEFT = 86;
  ICON_BOX_LEFT = 87;
  ICON_BOX_TOP_LEFT = 88;
  ICON_BOX_CENTER = 89;
  ICON_BOX_CIRCLE_MASK = 90;
  ICON_POT = 91;
  ICON_ALPHA_MULTIPLY = 92;
  ICON_ALPHA_CLEAR = 93;
  ICON_DITHERING = 94;
  ICON_MIPMAPS = 95;
  ICON_BOX_GRID = 96;
  ICON_GRID = 97;
  ICON_BOX_CORNERS_SMALL = 98;
  ICON_BOX_CORNERS_BIG = 99;
  ICON_FOUR_BOXES = 100;
  ICON_GRID_FILL = 101;
  ICON_BOX_MULTISIZE = 102;
  ICON_ZOOM_SMALL = 103;
  ICON_ZOOM_MEDIUM = 104;
  ICON_ZOOM_BIG = 105;
  ICON_ZOOM_ALL = 106;
  ICON_ZOOM_CENTER = 107;
  ICON_BOX_DOTS_SMALL = 108;
  ICON_BOX_DOTS_BIG = 109;
  ICON_BOX_CONCENTRIC = 110;
  ICON_BOX_GRID_BIG = 111;
  ICON_OK_TICK = 112;
  ICON_CROSS = 113;
  ICON_ARROW_LEFT = 114;
  ICON_ARROW_RIGHT = 115;
  ICON_ARROW_DOWN = 116;
  ICON_ARROW_UP = 117;
  ICON_ARROW_LEFT_FILL = 118;
  ICON_ARROW_RIGHT_FILL = 119;
  ICON_ARROW_DOWN_FILL = 120;
  ICON_ARROW_UP_FILL = 121;
  ICON_AUDIO = 122;
  ICON_FX = 123;
  ICON_WAVE = 124;
  ICON_WAVE_SINUS = 125;
  ICON_WAVE_SQUARE = 126;
  ICON_WAVE_TRIANGULAR = 127;
  ICON_CROSS_SMALL = 128;
  ICON_PLAYER_PREVIOUS = 129;
  ICON_PLAYER_PLAY_BACK = 130;
  ICON_PLAYER_PLAY = 131;
  ICON_PLAYER_PAUSE = 132;
  ICON_PLAYER_STOP = 133;
  ICON_PLAYER_NEXT = 134;
  ICON_PLAYER_RECORD = 135;
  ICON_MAGNET = 136;
  ICON_LOCK_CLOSE = 137;
  ICON_LOCK_OPEN = 138;
  ICON_CLOCK = 139;
  ICON_TOOLS = 140;
  ICON_GEAR = 141;
  ICON_GEAR_BIG = 142;
  ICON_BIN = 143;
  ICON_HAND_POINTER = 144;
  ICON_LASER = 145;
  ICON_COIN = 146;
  ICON_EXPLOSION = 147;
  ICON_1UP = 148;
  ICON_PLAYER = 149;
  ICON_PLAYER_JUMP = 150;
  ICON_KEY = 151;
  ICON_DEMON = 152;
  ICON_TEXT_POPUP = 153;
  ICON_GEAR_EX = 154;
  ICON_CRACK = 155;
  ICON_CRACK_POINTS = 156;
  ICON_STAR = 157;
  ICON_DOOR = 158;
  ICON_EXIT = 159;
  ICON_MODE_2D = 160;
  ICON_MODE_3D = 161;
  ICON_CUBE = 162;
  ICON_CUBE_FACE_TOP = 163;
  ICON_CUBE_FACE_LEFT = 164;
  ICON_CUBE_FACE_FRONT = 165;
  ICON_CUBE_FACE_BOTTOM = 166;
  ICON_CUBE_FACE_RIGHT = 167;
  ICON_CUBE_FACE_BACK = 168;
  ICON_CAMERA = 169;
  ICON_SPECIAL = 170;
  ICON_LINK_NET = 171;
  ICON_LINK_BOXES = 172;
  ICON_LINK_MULTI = 173;
  ICON_LINK = 174;
  ICON_LINK_BROKE = 175;
  ICON_TEXT_NOTES = 176;
  ICON_NOTEBOOK = 177;
  ICON_SUITCASE = 178;
  ICON_SUITCASE_ZIP = 179;
  ICON_MAILBOX = 180;
  ICON_MONITOR = 181;
  ICON_PRINTER = 182;
  ICON_PHOTO_CAMERA = 183;
  ICON_PHOTO_CAMERA_FLASH = 184;
  ICON_HOUSE = 185;
  ICON_HEART = 186;
  ICON_CORNER = 187;
  ICON_VERTICAL_BARS = 188;
  ICON_VERTICAL_BARS_FILL = 189;
  ICON_LIFE_BARS = 190;
  ICON_INFO = 191;
  ICON_CROSSLINE = 192;
  ICON_HELP = 193;
  ICON_FILETYPE_ALPHA = 194;
  ICON_FILETYPE_HOME = 195;
  ICON_LAYERS_VISIBLE = 196;
  ICON_LAYERS = 197;
  ICON_WINDOW = 198;
  ICON_HIDPI = 199;
  ICON_FILETYPE_BINARY = 200;
  ICON_HEX = 201;
  ICON_SHIELD = 202;
  ICON_FILE_NEW = 203;
  ICON_FOLDER_ADD = 204;
  ICON_ALARM = 205;
  ICON_CPU = 206;
  ICON_ROM = 207;
  ICON_STEP_OVER = 208;
  ICON_STEP_INTO = 209;
  ICON_STEP_OUT = 210;
  ICON_RESTART = 211;
  ICON_BREAKPOINT_ON = 212;
  ICON_BREAKPOINT_OFF = 213;
  ICON_BURGER_MENU = 214;
  ICON_CASE_SENSITIVE = 215;
  ICON_REG_EXP = 216;
  ICON_FOLDER = 217;
  ICON_FILE = 218;
  ICON_SAND_TIMER = 219;
  ICON_220 = 220;
  ICON_221 = 221;
  ICON_222 = 222;
  ICON_223 = 223;
  ICON_224 = 224;
  ICON_225 = 225;
  ICON_226 = 226;
  ICON_227 = 227;
  ICON_228 = 228;
  ICON_229 = 229;
  ICON_230 = 230;
  ICON_231 = 231;
  ICON_232 = 232;
  ICON_233 = 233;
  ICON_234 = 234;
  ICON_235 = 235;
  ICON_236 = 236;
  ICON_237 = 237;
  ICON_238 = 238;
  ICON_239 = 239;
  ICON_240 = 240;
  ICON_241 = 241;
  ICON_242 = 242;
  ICON_243 = 243;
  ICON_244 = 244;
  ICON_245 = 245;
  ICON_246 = 246;
  ICON_247 = 247;
  ICON_248 = 248;
  ICON_249 = 249;
  ICON_250 = 250;
  ICON_251 = 251;
  ICON_252 = 252;
  ICON_253 = 253;
  ICON_254 = 254;
  ICON_255 = 255;

TYPE

(*  Style property *)
  GuiStyleProp = RECORD
    controlId    : rl.ushort;
    propertyId   : rl.ushort;
    propertyValue: rl.uint;
  END;

(*  Gui control state *)
  GuiState = rl.int;

(*  Gui control text alignment *)
  GuiTextAlignment = rl.int;

(*  Gui controls *)
  GuiControl = rl.int;

(*  Gui base properties for every control *)
  GuiControlProperty = rl.int;

(*  Gui extended properties depend on control *)
  GuiDefaultProperty = rl.int;

(*  Toggle/ToggleGroup *)
  GuiToggleProperty = rl.int;

(*  Slider/SliderBar *)
  GuiSliderProperty = rl.int;

(*  ProgressBar *)
  GuiProgressBarProperty = rl.int;

(*  ScrollBar *)

  GuiScrollBarProperty = rl.int;

(*  CheckBox *)

  GuiCheckBoxProperty = rl.int;

(*  ComboBox *)
  GuiComboBoxProperty = rl.int;

(*  DropdownBox *)
  GuiDropdownBoxProperty = rl.int;

(*  TextBox/TextBoxMulti/ValueBox/Spinner *)
  GuiTextBoxProperty = rl.int;

(*  Spinner *)
  GuiSpinnerProperty = rl.int;

(*  ListView *)
  GuiListViewProperty = rl.int;

(*  ColorPicker *)
  GuiColorPickerProperty = rl.int;


(*  Global gui state control functions *)

PROCEDURE GuiEnable (  );

(*  Enable gui controls (global state) *)

PROCEDURE GuiDisable (  );

(*  Disable gui controls (global state) *)

PROCEDURE GuiLock (  );

(*  Lock gui controls (global state) *)

PROCEDURE GuiUnlock (  );

(*  Unlock gui controls (global state) *)

PROCEDURE GuiIsLocked (  ): BOOLEAN;

(*  Check if gui is locked (global state) *)

PROCEDURE GuiSetAlpha ( alpha: rl.float );

(*  Set gui controls alpha (global state), alpha goes from 0.0f to 1.0f *)

PROCEDURE GuiSetState ( state: rl.int );

(*  Set gui state (global state) *)

PROCEDURE GuiGetState (  ): rl.int;

(*  Get gui state (global state) *)
(*  rl.Font set/get functions *)

PROCEDURE GuiSetFont ( font: rl.Font );

(*  Set gui custom rl.Font (global state) *)

PROCEDURE GuiGetFont (  ): rl.Font;

(*  Get gui custom rl.Font (global state) *)
(*  Style set/get functions *)

PROCEDURE GuiSetStyle ( control: rl.int; property: rl.int; value: rl.int );

(*  Set one style property *)

PROCEDURE GuiGetStyle ( control: rl.int; property: rl.int ): rl.int;

(*  Get one style property *)
(*  Styles loading functions *)


PROCEDURE GuiLoadStyle ( fileName: ARRAY OF CHAR );

(*  Load style file over global style variable (.rgs) *)

PROCEDURE GuiLoadStyleDefault (  );

(*  Load style default over global style *)
(*  Tooltips management functions *)

PROCEDURE GuiEnableTooltip (  );

(*  Enable gui tooltips (global state) *)

PROCEDURE GuiDisableTooltip (  );

(*  Disable gui tooltips (global state) *)

PROCEDURE GuiSetTooltip ( tooltip: ARRAY OF CHAR );

(*  Set tooltip string *)
(*  Icons functionality *)

PROCEDURE GuiIconText ( iconId: rl.int; text: ARRAY OF CHAR ): rl.charptr;

(*  Get text with icon id prepended (if supported) *)

PROCEDURE GuiSetIconScale ( scale: rl.int );

(*  Set default icon drawing size *)

TYPE

PROCEDURE GuiGetIcons (  ): rl.uintptr;

(*  Get raygui icons data pointer *)

TYPE

PROCEDURE GuiLoadIcons ( fileName: ARRAY OF CHAR;
                         loadIconsName: BOOLEAN ): rl.voidptr;

(*  Load raygui icons file (.rgi) into internal icons data *)

PROCEDURE GuiDrawIcon ( iconId: rl.int; posX: rl.int; posY: rl.int; pixelSize: rl.int;
                        color: rl.Color );

(*  Draw icon using pixel size at specified position *)
(*  Controls *)
(* ---------------------------------------------------------------------------------------------------------- *)
(*  Container/separator controls, useful for controls organization *)

PROCEDURE GuiWindowBox ( bounds: rl.Rectangle; title: ARRAY OF CHAR ): [BOOLEAN];

(*  Window Box control, shows a window that can be closed *)

PROCEDURE GuiGroupBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Group Box control with text name *)

PROCEDURE GuiLine ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Line separator control, could contain text *)

PROCEDURE GuiPanel ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Panel control, useful to group controls *)

TYPE

PROCEDURE GuiTabBar ( bounds: rl.Rectangle; text: rl.voidptr; count: rl.int;
                      VAR active: rl.int ): [BOOLEAN];

(*  Tab Bar control, returns TAB to be closed or -1 *)

TYPE

PROCEDURE GuiScrollPanel ( bounds: rl.Rectangle; text: ARRAY OF CHAR; content: rl.Rectangle;
                           VAR scroll: rl.Vector2; VAR view: rl.Rectangle): [BOOLEAN];

(*  Scroll Panel control *)
(*  Basic controls set *)

PROCEDURE GuiLabel ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Label control, shows text *)

PROCEDURE GuiButton ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Button control, returns true when clicked *)

PROCEDURE GuiLabelButton ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Label button control, show true when clicked *)

TYPE

PROCEDURE GuiToggle ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                      VAR active: BOOLEAN ): [BOOLEAN];

(*  Toggle Button control, returns true when active *)

PROCEDURE GuiToggleGroup ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                           VAR active: rl.int ): [BOOLEAN];

(*  Toggle Group control, returns active toggle index *)

PROCEDURE GuiCheckBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                        VAR checked: BOOLEAN ): [BOOLEAN];

(*  Check Box control, returns true when active *)

PROCEDURE GuiComboBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                        VAR active: rl.int ): [BOOLEAN];

(*  Combo Box control, returns selected item index *)

PROCEDURE GuiDropdownBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR; VAR active: rl.int;
                           editMode: BOOLEAN): [BOOLEAN];

(*  Dropdown Box control, returns selected item *)

PROCEDURE GuiSpinner ( bounds: rl.Rectangle; text: ARRAY OF CHAR; VAR value: rl.int;
                       minValue: rl.int; maxValue: rl.int; editMode: BOOLEAN ): [BOOLEAN];

(*  Spinner control, returns selected value *)

PROCEDURE GuiValueBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR; VAR value: rl.int;
                        minValue: rl.int; maxValue: rl.int; editMode: BOOLEAN ): [BOOLEAN];

(*  Value Box control, updates input text with numbers *)

PROCEDURE GuiTextBox ( bounds: rl.Rectangle; text: ARRAY OF CHAR; textSize: rl.int;
                       editMode: BOOLEAN ): [BOOLEAN];

(*  Text Box control, updates input text *)

TYPE

PROCEDURE GuiSlider ( bounds: rl.Rectangle; textLeft: ARRAY OF CHAR;
                      textRight: ARRAY OF CHAR; VAR value: rl.float;
                      minValue: rl.float; maxValue: rl.float ): [BOOLEAN];

(*  Slider control, returns selected value *)

PROCEDURE GuiSliderBar ( bounds: rl.Rectangle; textLeft: ARRAY OF CHAR;
                         textRight: ARRAY OF CHAR; VAR value: rl.float;
                         minValue: rl.float; maxValue: rl.float ): [BOOLEAN];

(*  Slider Bar control, returns selected value *)

PROCEDURE GuiProgressBar ( bounds: rl.Rectangle; textLeft: ARRAY OF CHAR;
                           textRight: ARRAY OF CHAR; VAR value: rl.float;
                           minValue: rl.float; maxValue: rl.float ): [BOOLEAN];

(*  Progress Bar control, shows current progress value *)

PROCEDURE GuiStatusBar ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Status Bar control, shows info text *)

PROCEDURE GuiDummyRec ( bounds: rl.Rectangle; text: ARRAY OF CHAR ): [BOOLEAN];

(*  Dummy control for placeholders *)

PROCEDURE GuiGrid ( bounds: rl.Rectangle; text: ARRAY OF CHAR; spacing: rl.float;
                    subdivs: rl.int; VAR mouseCell: rl.Vector2 ): [BOOLEAN];

(*  Grid control, returns mouse cell position *)
(*  Advance controls set *)

PROCEDURE GuiListView ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                        VAR scrollIndex: rl.int; VAR active: rl.int ): [BOOLEAN];

(*  List View control, returns selected list item index *)

PROCEDURE GuiListViewEx ( bounds: rl.Rectangle; text: rl.voidptr; count: rl.int;
                          VAR scrollIndex: rl.int; VAR active: rl.int;
                          VAR focus: rl.int ): [BOOLEAN];

(*  List View with extended parameters *)

PROCEDURE GuiMessageBox ( bounds: rl.Rectangle; title: ARRAY OF CHAR;
                          message: ARRAY OF CHAR; buttons: ARRAY OF CHAR ): rl.int;

(*  Message Box control, displays a message *)

PROCEDURE GuiTextInputBox ( bounds: rl.Rectangle; title: ARRAY OF CHAR;
                            message: ARRAY OF CHAR; buttons: ARRAY OF CHAR;
                            text: ARRAY OF CHAR; textMaxSize: rl.int;
                            VAR secretViewActive: BOOLEAN ): [BOOLEAN];

(*  Text Input Box control, ask for text, supports secret *)

TYPE

PROCEDURE GuiColorPicker ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                           VAR color: rl.Color ): [BOOLEAN];

(*  Color Picker control (multiple color controls) *)

PROCEDURE GuiColorPanel ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                          VAR color: rl.Color ): [BOOLEAN];

(*  Color Panel control *)

PROCEDURE GuiColorBarAlpha ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                             VAR alpha: rl.float ): [BOOLEAN];

(*  Color Bar Alpha control *)

PROCEDURE GuiColorBarHue ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                           VAR value: rl.float ): [BOOLEAN];

(*  Color Bar Hue control *)

TYPE

PROCEDURE GuiColorPickerHSV ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                              VAR colorHsv: rl.Vector3 ): [BOOLEAN];

(*  Color Picker control that avoids conversion to RGB on each call (multiple color controls) *)

PROCEDURE GuiColorPanelHSV ( bounds: rl.Rectangle; text: ARRAY OF CHAR;
                             VAR colorHsv: rl.Vector3 ): [BOOLEAN];

(*  Color Panel control that returns HSV color value, used by GuiColorPickerHSV() *)
(* ---------------------------------------------------------------------------------------------------------- *)
(* ---------------------------------------------------------------------------------- *)
(*  Icons enumeration *)
(* ---------------------------------------------------------------------------------- *)

TYPE
  GuiIconName = rl.int;
(* H2D: End of enumeration: GuiIconName *)

(*   **********************************************************************************  *)
(* *                                                                                     *)
(* *   RAYGUI IMPLEMENTATION                                                             *)
(* *                                                                                     *)
(* ***********************************************************************************   *)

END rg.
